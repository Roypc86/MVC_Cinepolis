/*
Deployment script for Database_Cinepolis

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Database_Cinepolis"
:setvar DefaultFilePrefix "Database_Cinepolis"
:setvar DefaultDataPath "C:\Users\XPC\AppData\Local\Microsoft\VisualStudio\SSDT\Database_Cinepolis"
:setvar DefaultLogPath "C:\Users\XPC\AppData\Local\Microsoft\VisualStudio\SSDT\Database_Cinepolis"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Rename refactoring operation with key a468bd54-69cf-4424-9955-861d3faeb2ef is skipped, element [dbo].[Cine].[Salas] (SqlSimpleColumn) will not be renamed to IdSalas';


GO
PRINT N'Rename refactoring operation with key 1365c260-8c83-409f-8fa4-1219f657dcf3 is skipped, element [dbo].[Relacion_Pelicula_Actor].[Id] (SqlSimpleColumn) will not be renamed to IdPelicula';


GO
PRINT N'Rename refactoring operation with key 8a17bf2c-b3a1-498b-a955-e6abfa3e5f21 is skipped, element [dbo].[Relation_Producto_Combo].[Id] (SqlSimpleColumn) will not be renamed to ComboId';


GO
PRINT N'Rename refactoring operation with key 2d02cbc2-5595-45d3-9f31-1bca0eb4370c is skipped, element [dbo].[ComboNino].[Id] (SqlSimpleColumn) will not be renamed to IdCombo';


GO
PRINT N'Rename refactoring operation with key b21b41bd-2b91-4289-bbc7-2c39a63efdb6 is skipped, element [dbo].[ComboNino].[Juguete] (SqlSimpleColumn) will not be renamed to JugueteId';


GO
PRINT N'Rename refactoring operation with key db074aab-f39d-471a-a3fd-08aeb23f7427 is skipped, element [dbo].[ComboAdulto].[Tiquete] (SqlSimpleColumn) will not be renamed to TiqueteId';


GO
PRINT N'Rename refactoring operation with key cb202f4c-3687-447f-bb0b-b32bcd13dd19 is skipped, element [dbo].[Actor].[Nombre] (SqlSimpleColumn) will not be renamed to Nombre y Apellidos';


GO
PRINT N'Rename refactoring operation with key 01e079db-2275-41cd-b53e-bdc784035af1 is skipped, element [dbo].[Combo].[JugueteId] (SqlSimpleColumn) will not be renamed to Juguete';


GO
PRINT N'Creating Table [dbo].[Cine]...';


GO
CREATE TABLE [dbo].[Cine] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [Nombre]    NVARCHAR (60) NULL,
    [Ubicacion] NVARCHAR (60) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Combo]...';


GO
CREATE TABLE [dbo].[Combo] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [CineId]    INT            NULL,
    [EsAdulto]  BIT            NULL,
    [Juguete]   NVARCHAR (40)  NULL,
    [TiqueteId] INT            NULL,
    [Productos] NVARCHAR (200) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Horario]...';


GO
CREATE TABLE [dbo].[Horario] (
    [Id]           INT      IDENTITY (1, 1) NOT NULL,
    [Fecha]        DATE     NULL,
    [Hora_inicial] TIME (7) NULL,
    [Hora_final]   TIME (7) NULL,
    [SalaId]       INT      NULL,
    [CineId]       INT      NULL,
    [PeliculaId]   INT      NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Pelicula]...';


GO
CREATE TABLE [dbo].[Pelicula] (
    [Id]        INT             IDENTITY (1, 1) NOT NULL,
    [Nombre]    NVARCHAR (30)   NULL,
    [Genero]    NVARCHAR (30)   NULL,
    [Director]  NVARCHAR (30)   NULL,
    [EsAdultos] BIT             NULL,
    [Acciones]  NVARCHAR (300)  NULL,
    [Actores]   NVARCHAR (300)  NULL,
    [Resumen]   NVARCHAR (3000) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Sala]...';


GO
CREATE TABLE [dbo].[Sala] (
    [Id]        INT NOT NULL,
    [Capacidad] INT NULL,
    [CineId]    INT NOT NULL,
    CONSTRAINT [Sala_key] PRIMARY KEY CLUSTERED ([Id] ASC, [CineId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Tiquete]...';


GO
CREATE TABLE [dbo].[Tiquete] (
    [Id]     INT           IDENTITY (1, 1) NOT NULL,
    [Nombre] NVARCHAR (30) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Combo_To_Cine]...';


GO
ALTER TABLE [dbo].[Combo] WITH NOCHECK
    ADD CONSTRAINT [FK_Combo_To_Cine] FOREIGN KEY ([CineId]) REFERENCES [dbo].[Cine] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Combo_To_Tiquete]...';


GO
ALTER TABLE [dbo].[Combo] WITH NOCHECK
    ADD CONSTRAINT [FK_Combo_To_Tiquete] FOREIGN KEY ([TiqueteId]) REFERENCES [dbo].[Tiquete] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Horario_To_Sala]...';


GO
ALTER TABLE [dbo].[Horario] WITH NOCHECK
    ADD CONSTRAINT [FK_Horario_To_Sala] FOREIGN KEY ([SalaId], [CineId]) REFERENCES [dbo].[Sala] ([Id], [CineId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Horario_To_Pelicula]...';


GO
ALTER TABLE [dbo].[Horario] WITH NOCHECK
    ADD CONSTRAINT [FK_Horario_To_Pelicula] FOREIGN KEY ([PeliculaId]) REFERENCES [dbo].[Pelicula] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Sala_To_Cine]...';


GO
ALTER TABLE [dbo].[Sala] WITH NOCHECK
    ADD CONSTRAINT [FK_Sala_To_Cine] FOREIGN KEY ([CineId]) REFERENCES [dbo].[Cine] ([Id]) ON DELETE CASCADE;


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a468bd54-69cf-4424-9955-861d3faeb2ef')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a468bd54-69cf-4424-9955-861d3faeb2ef')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1365c260-8c83-409f-8fa4-1219f657dcf3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1365c260-8c83-409f-8fa4-1219f657dcf3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8a17bf2c-b3a1-498b-a955-e6abfa3e5f21')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8a17bf2c-b3a1-498b-a955-e6abfa3e5f21')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2d02cbc2-5595-45d3-9f31-1bca0eb4370c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2d02cbc2-5595-45d3-9f31-1bca0eb4370c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b21b41bd-2b91-4289-bbc7-2c39a63efdb6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b21b41bd-2b91-4289-bbc7-2c39a63efdb6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'db074aab-f39d-471a-a3fd-08aeb23f7427')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('db074aab-f39d-471a-a3fd-08aeb23f7427')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cb202f4c-3687-447f-bb0b-b32bcd13dd19')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cb202f4c-3687-447f-bb0b-b32bcd13dd19')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '01e079db-2275-41cd-b53e-bdc784035af1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('01e079db-2275-41cd-b53e-bdc784035af1')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------

DELETE FROM Accion;
DBCC CHECKIDENT ('Accion', RESEED, 0);
DELETE FROM Actor;
DBCC CHECKIDENT ('Actor', RESEED, 0);

DELETE FROM Cine;
DBCC CHECKIDENT ('Cine', RESEED, 0);


*/

--Datos Cine
MERGE INTO Cine AS Target
USING (VALUES
 (1, 'Cinepolis 1', 'San José, Desampados'),
 (2, 'Cinepolis 2', 'San José, Acosta')
)
AS Source ([Id], Nombre, Ubicacion)
ON Target.Id = Source.Id
WHEN NOT MATCHED BY TARGET THEN
INSERT (Nombre, Ubicacion)
VALUES (Nombre, Ubicacion);

--Datos Pelicula
MERGE INTO Pelicula AS Target
USING (VALUES
 (1, 'Avatar', 'Acción y Aventura', 'James Cameron', 1, 'A_actor 1, A_actor 2', 'A_accion_1, A_accion 2', 'Avatar (comercializada como Avatar de James Cameron) es una película épica de ciencia ficción militar y animación estadounidense de 2009,6​7​ escrita, producida y dirigida por James Cameron y protagonizada por [Sam Worthington], [Zoe Saldaña], [Sigourney Weaver], Stephen Lang y Michelle Rodriguez.'),
 (2, 'Gato con botas', 'Comedia y Aventura', 'Chris Miller', 0,'G_actor 1, G_actor 2', 'G_accion_1, G_accion 2', 'Un pobre molinero fallece dejando como única herencia al pequeño de sus hijos un gato. El joven decide quedarse con él y éste le promete que si confía en él y le consigue un par de botas y un saco, saldrán de la pobreza. El astuto gato se hace pasar por siervo de un gran marqués impresionando con sus regalos al rey. Luego engaña a un malvado ogro cambiaformas para devorarlo, haciéndose con su castillo y sus tierras y prepara un encuentro entre su joven amo, el nuevo marqués de Carabás, y la familia real, fingiendo que ha sido asaltado. Así, el joven acaba convertido en un noble y casándose con la princesa gracias al ingenio de su gato.'),
 (3, 'Maverick', 'Acción',  'Joseph Kosinski', 1, 'Thomas Cruise Mapother, Glen Power Jr' , 'M_accion_1, M_accion 2', 'Tras más de treinta años de servicio como uno de los mejores aviadores de la Armada, Pete “Maverick” Mitchell (Tom Cruise) está en su casa, forzando los límites como valiente piloto de pruebas y esquivando el ascenso de rango que le dejaría en tierra. En el transcurso de unas sesiones de formación para que un destacamento de graduados de TOPGUN llevase a cabo una misión especializada que ningún piloto vivo había realizado, Maverick se encuentra con el teniente Bradley Bradshaw (Miles Teller), cuyo indicativo de llamada es “Rooster”, el hijo del difunto amigo de Maverick y oficial de intercepción y radar, el teniente Nick Bradshaw, también conocido como “Goose”.'),
 (4, 'Toy Story 3', 'Comedia',  'Lee Unkrich', 0, 'T1, T2', 'T_accion 1, T_accion 2','Toy Story 3 es la tercera película de la saga de animación Toy Story. La película fue distribuida en cines en formato analógico, digital y Disney Digital 3D.')
)
AS Source ([Id], Nombre, Genero, Director, EsAdultos, Actores, Acciones, Resumen)
ON Target.Id = Source.Id
WHEN NOT MATCHED BY TARGET THEN
INSERT (Nombre, Genero, Director, EsAdultos, Actores, Acciones, Resumen)
VALUES (Nombre, Genero, Director, EsAdultos, Actores, Acciones, Resumen);

--Datos Sala
MERGE INTO Sala AS Target
USING (VALUES
 (1, 21, 1),
 (2, 23, 1),
 (1, 21, 2),
 (2, 32, 2)
)
AS Source ([Id], Capacidad, CineId)
ON Target.Id = Source.Id
WHEN NOT MATCHED BY TARGET THEN
INSERT ([Id],Capacidad, CineId)
VALUES ([Id],Capacidad, CineId);

--Datos Horario
MERGE INTO Horario AS Target
USING (VALUES
 (1, '2023-03-13', '17:30', '20:00', 1, 1, 1),
 (2, '2023-03-13', '20:30', '23:00', 1, 1, 1),
 (3, '2023-03-14', '17:30', '20:00', 2, 2, 2),
 (3, '2023-03-14', '12:30', '20:00', 2, 2, 3)
)
AS Source ([Id], Fecha, Hora_inicial, Hora_final, SalaId, CineId, PeliculaId )
ON Target.Id = Source.Id
WHEN NOT MATCHED BY TARGET THEN
INSERT (Fecha, Hora_inicial, Hora_final, SalaId, CineId, PeliculaId)
VALUES (Fecha, Hora_inicial, Hora_final, SalaId, CineId, PeliculaId);

--Datos Tiquete
MERGE INTO Tiquete AS Target
USING (VALUES
 (1, 'Viaje'),
 (2, 'Dinero'),
 (3, 'Carro')
)
AS Source ([Id], Nombre)
ON Target.Id = Source.Id
WHEN NOT MATCHED BY TARGET THEN
INSERT (Nombre)
VALUES (Nombre);

--Datos Combo
MERGE INTO Combo AS Target
USING (VALUES
 (1, 1, 0, 'Niño avatar', NULL, 'Refresco, Palomitas de caramelo'),
 (2, 1, 0, 'Rex', NULL, 'Refresco, Papas'),
 (3, 1, 1, NULL, 1, 'Refresco, Hot dog'),
 (4, 1, 1, NULL, 2, 'Refresco, Palomitas de caramelo'),
 (5, 2, 0, 'Jet', NULL, 'Refresco, Palomitas de caramelo'),
 (6, 2, 1, NULL, 3, 'Refresco, Palomitas de caramelo')
)
AS Source ([Id], CineId, EsAdulto, Juguete, TiqueteId, Productos)
ON Target.Id = Source.Id
WHEN NOT MATCHED BY TARGET THEN
INSERT (CineId, EsAdulto, Juguete, TiqueteId, Productos)
VALUES (CineId, EsAdulto, Juguete, TiqueteId, Productos);
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Combo] WITH CHECK CHECK CONSTRAINT [FK_Combo_To_Cine];

ALTER TABLE [dbo].[Combo] WITH CHECK CHECK CONSTRAINT [FK_Combo_To_Tiquete];

ALTER TABLE [dbo].[Horario] WITH CHECK CHECK CONSTRAINT [FK_Horario_To_Sala];

ALTER TABLE [dbo].[Horario] WITH CHECK CHECK CONSTRAINT [FK_Horario_To_Pelicula];

ALTER TABLE [dbo].[Sala] WITH CHECK CHECK CONSTRAINT [FK_Sala_To_Cine];


GO
PRINT N'Update complete.';


GO
